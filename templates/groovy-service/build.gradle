plugins {
    id 'com.gradle.build-scan' version '1.9'

    id 'groovy'

    id 'org.springframework.boot' version '1.5.7.RELEASE'

    id 'jacoco'

    id 'idea'
}

version = __VERSION__

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile 'org.slf4j:slf4j-api'
    compile 'ch.qos.logback:logback-classic'

    compile 'com.ryantenney.metrics:metrics-spring:3.1.3'
    compile 'io.dropwizard.metrics:metrics-core:3.2.3'
    compile 'io.dropwizard.metrics:metrics-annotation:3.2.3'

    compile 'org.apache.commons:commons-lang3:3.5'

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile 'net.bytebuddy:byte-buddy:1.6.5'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    integrationTestCompile 'com.stehno.ersatz:ersatz:1.4.0'
    integrationTestCompile 'io.undertow:undertow-servlet:1.4.15.Final'

    integrationTestCompile 'org.testcontainers:testcontainers:1.4.2'
}

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
  testLogging {
      events "passed", "skipped", "failed"
  }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        events "passed", "skipped", "failed"
    }
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

apply plugin: 'application'
mainClassName = '${rootPackage}.Application'
